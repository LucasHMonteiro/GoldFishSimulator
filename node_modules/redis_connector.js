var redis = require('redis');
var client = redis.createClient();
var fs = require('fs');

module.exports = {
  Redis: function(){
    this.redisGetData = function(){
      client.get('pH', function(err, reply){
        var data = JSON.parse(fs.readFileSync('pH.json'));
        data.pH = reply;
        var json = JSON.stringify(data, null, 2);
        fs.writeFile('pH.json', json);
      });
      client.get('temperature', function(err, reply){
        var data = JSON.parse(fs.readFileSync('temperature.json'));
        data.temperature = reply;
        var json = JSON.stringify(data, null, 2);
        fs.writeFile('temperature.json', json);
      });
      client.hgetall('schedule', function(err, reply){
        var data = JSON.parse(fs.readFileSync('schedule.json'));
        data.first = reply.first;
        data.second = reply.second;
        data.third = reply.third;
        var json = JSON.stringify(data, null, 2);
        fs.writeFile('schedule.json', json);
      });
      client.get('human', function(err, reply){
        var data = JSON.parse(fs.readFileSync('human.json'));
        data.human = reply;
        var json = JSON.stringify(data, null, 2);
        fs.writeFile('human.json', json);
      })
      client.hgetall('feed', function(err, reply){
        var data = JSON.parse(fs.readFileSync('feed.json'));
        data.first = reply.first;
        data.second = reply.second;
        data.third = reply.third;
        var json = JSON.stringify(data, null, 2);
        fs.writeFile('feed.json', json);
      });
    }
    this.getData = function(){
      this.redisGetData();
      var pH = JSON.parse(fs.readFileSync('pH.json'));
      var temperature = JSON.parse(fs.readFileSync('temperature.json'));
      var schedule = JSON.parse(fs.readFileSync('schedule.json'));
      var human = JSON.parse(fs.readFileSync('human.json'));
      var feed = JSON.parse(fs.readFileSync('feed.json'));
      var data = {
        pH: pH.pH,
        temperature: temperature.temperature,
        schedule: {
          first: schedule.first,
          second: schedule.second,
          third: schedule.third
        },
        human: human.human,
        feed: {
          first: feed.first,
          second: feed.second,
          third: feed.third
        }
      }
      return data;
    }
  }
}
